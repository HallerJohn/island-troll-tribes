package PetMovement


// Standard Library Imports:
import ClosureEvents
import Orders
import ClosureForGroups
import HashMap
import LastOrder
import LinkedList

// Local Imports:
import LocalObjectIDs
import Pets
import Classes

// Array of the mouse positions kept for moving the pet in manual control mode.
vec2 array MOUSE_POS

// Map of players to their chosen control scheme for pets.
public let PET_CONTROLS = new HashMap<player, bool>()

// Radius that pet will search for enemy when moved in manual control.
let PET_ATTACK_RADIUS = 100.

// Pet will randomly choose a position in this radius from target position in automatic mode.
// This is done to prevent the pet and troll from stacking as well as an aesthetic choice.
let PET_MOVE_RANGE = 200.

// The orders that the pet is allowed to copy using auto movement.
let ALLOWED_ORDERS = asList(
    Orders.smart,
    Orders.move,
    Orders.attack,
    Orders.stop,
    Orders.holdposition
)

// Used to continuously track the mouse position of players, used to order pet in manual control mode.
function updateMousePos()
    MOUSE_POS[EventData.getTriggerPlayer().getId()] = EventData.getMouseWorldPos()

// Manual control pet movement.
function onKeyDown(player triggerer)
    // Exit if the player is not using manual control mode.
    if PET_CONTROLS.get(triggerer) == true
        return
    
    // Get the triggerer's Pet.
    let pet = triggerer.getPet() 

    // Find the nearest enemy in range of the target position.
    forNearestUnit(MOUSE_POS[triggerer.getId()], PET_ATTACK_RADIUS, Filter(-> GetFilterUnit().isEnemyOf(GetTriggerPlayer()))) (unit u) ->
        // If an enemy is found.
        if u != null and u.isEnemyOf(triggerer)
            // Attack the enemy
            pet.issueTargetOrderById(Orders.attack, u)

        // If no enemy is found.
        else 
            // Move to target location.
            pet.issuePointOrderById(Orders.smart, MOUSE_POS[triggerer.getId()])

// Auto control pet movement.
function autoMovePet()
    // Exit if the player is using manual control mode.
    if PET_CONTROLS.get(EventData.getTriggerPlayer()) == false
        return

    // Store the moving unit.
    let u = EventData.getTriggerUnit()

    // Verify the moving unit has a pet and is a derivitive of Beast Master.
    if u.getOwner().getPet() != null and getTrollBaseClass(u) == UNIT_BEAST_MASTER
        // Store the pet of moving unit.
        let pet = u.getOwner().getPet()

        let prevOrder = u.getLastOrder()

        // Compute the type of the previous order.
        let orderType = prevOrder == null
            ? OrderType.IMMEDIATE
            : prevOrder.orderType

        // Exit if the pet is not allowed to copy the order.
        if not ALLOWED_ORDERS.has(prevOrder.orderId)
            return
        
        // Issue the previous order to the pet.
        switch orderType
            case POINT
                // Moves the pet to a random location in a small circle around target pos.
                vec2 targetPos = prevOrder.targetPosition
                targetPos.x += GetRandomReal(-PET_MOVE_RANGE, PET_MOVE_RANGE)
                targetPos.y += GetRandomReal(-PET_MOVE_RANGE, PET_MOVE_RANGE)
                pet.issuePointOrderById(prevOrder.orderId, targetPos)
            case TARGET
                pet.issueTargetOrderById(prevOrder.orderId, prevOrder.target)
            case IMMEDIATE
                pet.issueImmediateOrderById(prevOrder.orderId)

init
    // Used for auto control of the pet.
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER) ->
        autoMovePet()
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER) ->
        autoMovePet()
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_ISSUED_ORDER) ->
        autoMovePet()

    // Continually update the mouse positions of players.
    registerPlayerEvent(EVENT_PLAYER_MOUSE_MOVE) ->
        updateMousePos()

    // Used for manual control of the pet.
    // Using triggers for this as it seems the events don't work.
    let t = CreateTrigger()..addAction(-> onKeyDown(GetTriggerPlayer()))

    for index = 0 to bj_MAX_PLAYER_SLOTS - 1
        t.registerPlayerKeyPress(players[index], OSKEY_R, OSKEY_META.CTRL, true)
