package PetMovementAbility


// Standard Library Imports:
import ChannelAbilityPreset
import ClosureEvents
import ClosureTimers
import LodashExtensions
import Assets
import Lodash

// Local Imports:
import LocalObjectIDs
import PetMovement
import Tribe
import Game
import ToolTipsUtils

let NAME     = "Toggle Pet Control"
let TOOLTIP  = "Toggle pet control."
let TOOLTIP_EXT = "Toggle between automatic and manual pet controls.\n" +
                    "Manual: In manual mode press \"CTRL + R\" to order your pet to move/attack target location.\n" +
                    "Automatic: In automatic mode the pet will copy actions taken by the owner."
let ORDER_ID = "barkskinoff"

let AUTO_CONTROL_MESSAGE = "Auto pet control."
let MANUAL_CONTROL_MESSAGE = "Manual pet control."


class TogglePetControlSpell extends ChannelAbilityPreset
    construct(int newAbilityId, string hotkey, Pair<int, int> buttonPos)
        super(newAbilityId, 1, true)
        this.setDummyAbility()
        this.setAnimationNames("")
        this.presetTargetTypes(Targettype.NONE)
        this.setButtonPositionNormalX(buttonPos.a)
        this.setButtonPositionNormalY(buttonPos.b)
        this.setIconNormal(Icons.bTNSelectUnit)
        this.setHeroAbility(true)
        this.setHotkeyNormal(hotkey)
        this.setName(NAME)
        this.setLevels(1)
        this.setTooltipNormal(1, makeToolTipNorm(hotkey, TOOLTIP))
        this.setTooltipNormalExtended(1, TOOLTIP_EXT)
        this.presetBaseOrderID(lvl -> ORDER_ID)
        this.setAnimationNames("")
        this.setCheckDependencies(true)
        this.setRequirements(UPGD_PET_TAMED_TRUE.toRawCode())
        this.setEditorSuffix("(Wurst)")

@compiletime function createPetControlSpells()
    new TogglePetControlSpell(ABILITY_TOGGLE_PET_CONTROL, "R", new Pair(3, 0))
    new TogglePetControlSpell(ABILITY_TOGGLE_PET_CONTROL_SHAPESHIFTER, "F", new Pair(3, 2))


// Used to toggle pet controls stored in `PetMovement.wurst`.
function togglePetControl()
    // If auto controls are currently active.
    if PET_CONTROLS.getAndRemove(EventData.getTriggerPlayer())
        // Print message alerting the switch to manual controls.
        print(MANUAL_CONTROL_MESSAGE)

        // Reset the player's controls to manual mode.
        PET_CONTROLS.put(EventData.getTriggerPlayer(), false)

    // If manual controls are currently active.
    else
        // Print message alerting the switch to auto controls.
        print(AUTO_CONTROL_MESSAGE)

        // Reset the player's controls to auto mode.
        PET_CONTROLS.put(EventData.getTriggerPlayer(), true)

// Initialize all player's controls to auto at the beginning of the game.
function initializeControls()
    Tribe.getTribes().each(t -> t.getMembers().each(member -> PET_CONTROLS.put(member, true)))

init
    EventListener.onCast(ABILITY_TOGGLE_PET_CONTROL, _ -> togglePetControl())
    EventListener.onCast(ABILITY_TOGGLE_PET_CONTROL_SHAPESHIFTER, _ -> togglePetControl())

    registerGameStartEvent() ->
        nullTimer() ->
            initializeControls()
