package PetGrowth

// Standard library imports:
import ClosureTimers
import LinkedList
import ClosureEvents
import HashMap

// Local imports:
import Pets
import Transformation
import LocalObjectIDs

// The time for each species to grow.
let ELK_GROW_TIME = 90.
let WOLF_GROW_TIME = 120.
let BEAR_GROW_TIME = 150.
let HAWK_GROW_TIME = 90.

// Map of the species to the growth time for that species.
let SPECIES_TIME_MAP = new HashMap <int, real>()
    ..put(UNIT_FAWN, ELK_GROW_TIME)
    ..put(UNIT_WOLF_PUP, WOLF_GROW_TIME)
    ..put(UNIT_BEAR_CUB, BEAR_GROW_TIME)
    ..put(UNIT_HAWK_HATCHLING, HAWK_GROW_TIME)
    ..put(UNIT_FOREST_DRAGON_HATCHLING, HAWK_GROW_TIME)
    ..put(UNIT_RED_DRAGON_HATCHLING, HAWK_GROW_TIME)
    ..put(UNIT_BRONZE_DRAGON_HATCHLING, HAWK_GROW_TIME)
    ..put(UNIT_NETHER_DRAGON_HATCHLING, HAWK_GROW_TIME)

function growPet(unit pet)
    // Look up the growth chain for the pet.
    let chain = pet.getPetGrowthChain()

    // Look up the next unit along the chain.
    let next = chain.get(chain.indexOf(pet.getTypeId()) + 1)

    // Gets the first unit in the growth chain to determine the species of the pet.
    let species = pet.getPetGrowthChain().getFirst()

    // Exit if the unit is at the end of its growth chain or if no growth time for that species was found.
    if next == 0 or species == 0
        return

    // Wait until the appropriate growth time has passed.
    doAfter(SPECIES_TIME_MAP.get(species)) ->
        // Grow the pet.
        transformUnit(pet, next)
        // Start the growth cycle for the next stage.
        growPet(pet)

init
    EventListener.onTargetCast(ABILITY_PET_TAME) (unit caster, unit target) ->
        growPet(target)
